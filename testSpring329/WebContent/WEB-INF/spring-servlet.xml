<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
						http://www.springframework.org/schema/lang
						http://www.springframework.org/schema/lang/spring-lang.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd">
						
				
	<mvc:annotation-driven />
	<!-- 
		Spring MVC @Controller에 요청을 보내기 위해 필요한
		HandlerMapping 과 HandlerAdapter를 Bean으로 등록한다.
		HandlerMapping : HTTP 요청정보를 이용해서 컨트롤러를 찾아주는 기능
		HandlerAdapter : HandlerMapping 을 통해 찾은 컨트롤러를 직접 실행하는 기능을  수행
	 -->		
	
	
	<context:component-scan base-package="a.b.c.com.**" />
	<!-- 
		base-package에 지정한 패키지 내의 클래스를 스캔하고
		Annotation(@Component, @Controller, @Service, @Repository(DAO, Mapper))를 확인한 후
		Bean 인스턴스로 생성한다.
		이후 @Autowired(의존성 주입 : VO에 값 세팅 : 필드, 생성자, 함수),
			@Qualifier Annotation(빈 식별)을 인식할 수 있다.
	 -->

	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 
		UrlBasedViewResolver 객체는
		Controller 에서 넘겨준 view의 이름을 보고 (넘겨준 view의 이름이 test.jsp)
		"/WEB-INF/view/넘겨준view.jsp"를 찾는다. "WEB/INF/view/test.jsp" 를 찾는다.
		JstlView : jsp 파일에서 JSTL 로 포매팅이나 메시지를 사용할 수 있다.
	 -->
</beans>
